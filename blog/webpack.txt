3:I[9275,[],""]
5:I[1343,[],""]
6:I[9512,["291","static/chunks/291-6bbee38a07e9cada.js","185","static/chunks/app/layout-3bb9540adf3efcfb.js"],"ThemeProvider"]
7:I[8871,["291","static/chunks/291-6bbee38a07e9cada.js","185","static/chunks/app/layout-3bb9540adf3efcfb.js"],"default"]
4:["slug","webpack","d"]
0:["vWVJ_ukauau6HJfuHRxA7",[[["",{"children":["blog",{"children":[["slug","webpack","d"],{"children":["__PAGE__?{\"slug\":\"webpack\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","webpack","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cb67a214fed64752.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__variable_c1e5c9 __variable_3a0388","children":["$","$L6",null,{"attribute":"class","children":[["$","$L7",null,{}],["$","main",null,{"className":"flex max-w-2xl mx-auto bg-gradient","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/14d650bd7f8bf870.css","precedence":"next","crossOrigin":"$undefined"}]],"$L8"]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Create Next App"}],["$","meta","3",{"name":"description","content":"Generated by create next app"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
2:["$","main",null,{"className":"font-mono","children":[["$","h1",null,{"children":"Webpack"}],["$","div",null,{"className":"text-[14px] text-tertiary mt-1","children":"2021-02-02"}],["$","div",null,{"className":"markdown mt-10","children":"$L9"}]]}]
9:[["$","h2",null,{"children":"Loader"}],"\n",["$","p",null,{"children":"定义：loader 只是一个 Javascript 模块，此函数导出为函数"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"module.exports = function (source) {\n  return source\n}\n"}]}],"\n",["$","p",null,{"children":"多个 loader 串行执行，从后到前执行，类似 Compose"}],"\n",["$","h2",null,{"children":"webpack 打包结果分析"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":";(function (modules) {\n  // ...\n})({\n  \"./src/hello.js\": function () {\n    // ...\n  },\n  \"./src/index.js\": function () {\n    // ...\n  },\n})\n"}]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"打包结果就是一个 IIFE，称之为 webpackBootstrap，参数是 modules：modules 对象的 key 是依赖路径，value 是经过简单处理后的脚本"}],"\n",["$","li",null,{"children":["打包结果中，定义了一个重要的模块加载函数 ",["$","strong",null,{"children":"webpack_require"}]]}],"\n",["$","li",null,{"children":["我们首先使用 ",["$","strong",null,{"children":"webpack_require"}]," 加载函数去加载入口模块 ./src/index.js"]}],"\n",["$","li",null,{"children":["加载函数 \b ",["$","strong",null,{"children":"webpack_require"}]," 使用了闭包变量 installedModules，它的作用是将已加载过的模块结果保存在内存中。"]}],"\n"]}],"\n",["$","h2",null,{"children":"webpack 工作的基本原理"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"配置读取：读取 webpack.config.js 的配置、或者命令行"}],"\n",["$","li",null,{"children":"实例化所需的 webpack 插件，在 webpack 时间流上挂载钩子，这样在合适的构建过程中，插件具备了改动产出结果的能力"}],"\n",["$","li",null,{"children":["以入口文件为开始，进行依赖收集； 通过 loader 对依赖文件进行编译；编译好之后生成 AST 抽象语法树；分析文件依赖关系，将不同模块化语法替换为",["$","strong",null,{"children":"webpack_require"}],",使用自己的加载器进行模块化实现"]}],"\n",["$","li",null,{"children":"产出结果，依据开发者的配置，将结果打包到目录下"}],"\n"]}],"\n",["$","p",null,{"children":"webpack 和插件采用基于事件流的发布订阅模式，监听某些关键过程，在这些环节中执行插件任务。"}],"\n",["$","h2",null,{"children":"执行步骤："}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"加载 loaded"}],"\n",["$","li",null,{"children":"封存 sealed"}],"\n",["$","li",null,{"children":"优化 optimized"}],"\n",["$","li",null,{"children":"分块 chunked"}],"\n",["$","li",null,{"children":"哈希 hashed"}],"\n",["$","li",null,{"children":"重新创建 restored"}],"\n"]}],"\n",["$","h2",null,{"children":"抽象语法树 AST"}],"\n",["$","p",null,{"children":"可以用 obj 表示，分析代码的依赖关系"}],"\n",["$","h2",null,{"children":"compiler 和 compilation"}],"\n",["$","p",null,{"children":"webpack 的构建过程是通过 compiler 控制流程，compilation 进行解析。在开发插件时，我们可以从 compiler 对象中拿到所有和 webpack 主环境相关的内容，包括事件钩子。"}],"\n",["$","p",null,{"children":"compiler 对象和 compilation 对象都继承自 tapable，tapable.js 这个库暴露了所有和事件相关的 pub/sub 的方法。"}],"\n",["$","h3",null,{"children":"compiler 对象"}],"\n",["$","p",null,{"children":"webpack 的骨架，或中枢神经。\n它的实例包含了完整的 webpack 配置，全局只有一个 compiler 实例，\n暴露了很多钩子 Hooks："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"//基本写法\ncompiler.hooks.someHook.tap(...)\n// 读取entry配置完成后\ncompiler.hooks.entryOption.tap(...)\n// 资源输出之前\ncompiler.hooks.emit.tap(...)\n"}]}],"\n",["$","h3",null,{"children":"compilation 对象"}],"\n",["$","p",null,{"children":"当 webpack 以开发模式运行时，每当检测到文件变化，一个新的 compilation 对象将被创建。这个对象包含了当前的模块资源、编译生成资源、变化的文件等信息。也就是说，所有构建过程中产生的构建数据都存储在该对象上，它也掌控着构建过程中的每一个环节。该对象也提供了很多事件回调供插件做扩展。\ncompilation 也暴露了与模块和依赖有关的粒度更小的钩子:"}],"\n",["$","h2",null,{"children":"Loader"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"module.exports = function (source) {\n  // 获取开发者配置的 options\n  const options = loaderUtils.getOptions(this)\n  // some magic...\n  // return content\n  this.callback(null, content)\n}\n"}]}],"\n",["$","h2",null,{"children":"Plugin"}],"\n",["$","p",null,{"children":"我们反复提到过 webpack 事件流机制，也就是说在 webpack 构建的生命周期中，会广播许多事件。\nloader 和 plugin 的差异："}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"loader 其实就是一个转换器，执行单纯的文件转换操作。"}],"\n",["$","li",null,{"children":"plugin 是一个扩展器，它丰富了 webpack 本身，在 loader 过程结束后，webpack 打包的整个过程中，weback plugin 并不直接操作文件，而是基于事件机制工作，监听 webpack 打包过程中的某些事件，见缝插针，修改打包结果。"}],"\n"]}],"\n",["$","p",null,{"children":"一个自定义 webpack plugin 的骨架结构就是一个带有 apply 方法的 class："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"class CustomPlugin {\n  constructor(options) {\n    this.options = options\n  }\n  apply(compiler) {\n    // 相关钩子注册回调\n    compiler.hooks.someHook.tap(\"CustomPlugin\", () => {\n      // magic here...\n    })\n\n    // 打印出此时 compiler 暴露的钩子\n    for (var hook of Object.keys(compiler.hooks)) {\n      console.log(hook)\n    }\n  }\n}\n\nmodule.exports = customPlugin\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"class CustomPlugin {\n  constructor(options) {\n    this.options = options\n  }\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\n      \"CustomPlugin\",\n      function (compilation, callback) {\n        compilation.hooks.someOtherHook.tap(\"SomePlugin\", function () {\n          // some magic here\n        })\n      }\n    )\n  }\n}\n\nmodule.exports = customPlugin\n"}]}],"\n",["$","p",null,{"children":"实现 webpack plugin 的套路："}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"定义一个 JavaScript class 函数，或在函数原型（prototype）中定义一个以 compiler 对象为参数的 apply 方法。"}],"\n",["$","li",null,{"children":"apply 函数中通过 compiler 插入指定的事件钩子，在钩子回调中拿到 compilation 对象。"}],"\n",["$","li",null,{"children":"使用 compilation 操纵修改 webapack 打包内容。"}],"\n"]}]]
