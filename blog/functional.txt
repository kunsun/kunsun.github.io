3:I[3099,[],""]
5:I[2506,[],""]
6:I[3637,["177","static/chunks/177-274c75a00d0077d0.js","856","static/chunks/856-e3a3ce37a6ba7291.js","185","static/chunks/app/layout-b234c99f4218b945.js"],"ThemeProvider"]
7:I[2483,["177","static/chunks/177-274c75a00d0077d0.js","856","static/chunks/856-e3a3ce37a6ba7291.js","185","static/chunks/app/layout-b234c99f4218b945.js"],"default"]
4:["slug","functional","d"]
0:["i9D5EcKWLaaSIRmoYtUaQ",[[["",{"children":["blog",{"children":[["slug","functional","d"],{"children":["__PAGE__?{\"slug\":\"functional\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","functional","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","sizes":"any"}],["$","body",null,{"className":"__variable_c1e5c9 __variable_3a0388","children":["$","$L6",null,{"attribute":"class","children":[["$","$L7",null,{}],["$","main",null,{"className":"flex max-w-2xl w-2xl mx-auto bg-gradient","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e3c2fb5352ee446e.css","precedence":"next","crossOrigin":"$undefined"}]],"$L8"]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"kunsun.me"}],["$","meta","3",{"name":"description","content":"Generated by create next app"}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
2:["$","main",null,{"className":"font-mono","children":[["$","h1",null,{"children":"函数式编程"}],["$","div",null,{"className":"text-[14px] text-tertiary mt-1","children":"2021-02-02"}],["$","div",null,{"className":"markdown mt-10","children":"$L9"}]]}]
9:[["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"参考书：https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/"}],"\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"函数式的好处："}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"表达力更清晰"}],"\n",["$","li",null,{"children":"利于复用"}],"\n",["$","li",null,{"children":"利于维护：同样的输入有同样的结果，在维护和调试代码时能够保持专注"}],"\n"]}],"\n",["$","h2",null,{"children":"纯函数"}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"一个函数如果输入参数确定，输出结果是唯一确定的，那么它就是纯函数。"}],"\n"]}],"\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"纯函数不能修改外部变量，造成副作用，不能调用 Math.radom() 方法以及发送异步请求等，因为这些操作都不具有确定性。"}],"\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"纯函数的特点："}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"无状态"}],"\n",["$","li",null,{"children":"无副作用"}],"\n",["$","li",null,{"children":"无关时序"}],"\n",["$","li",null,{"children":"幂等： 无论调用多少次，结果相同"}],"\n"]}],"\n",["$","h2",null,{"children":"高阶函数"}],"\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"函数缓存"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"text-sm p-1","children":"const memorize = (fn) => {\n  let cacheMap = {}\n  return function (...args) {\n    const cacheKey = args.join(\"_\")\n    if (cacheKey in cacheMap) {\n      return cache[cacheKey]\n    } else {\n      return (cacheMap[cacheKey] = fn.apply(this || {}, args))\n    }\n  }\n}\n"}]}],"\n",["$","h2",null,{"children":"组合"}],"\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"更加通用的组合做法是使用 compose 方法，收益非常直观："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"单一功能的小函数更好维护"}],"\n",["$","li",null,{"children":"通过组合，将单一功能的小函数串联起来，完成复杂的功能"}],"\n",["$","li",null,{"children":"复用性更好，硬编码更少"}],"\n"]}],"\n",["$","h2",null,{"children":"point free"}],"\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"没有形参"}],"\n",["$","h2",null,{"children":"curry 化分析"}],"\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"是把接受多个参数的函数变换成接受一个单一参数的函数，并且返回接受余下的参数而且返回结果的新函数的技术"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"text-sm p-1","children":"const filterLowerNumber = (number) => {\n  return (array) => {\n    let result = []\n    for (let i = 0, length = array.length; i < length; i++) {\n      let currentValue = array[i]\n      if (currentValue < number) result.push(currentValue)\n    }\n    return result\n  }\n}\n\nconst filterLowerThan10 = filterLowerNumber(10)\n\nfilterLowerThan10([1, 3, 5, 29, 34])\n"}]}],"\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"例题 1:\n实现 add 方法，要求：\nadd(1)(2) == 3 // true\nadd(1)(2)(3) == 6 // true"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"text-sm p-1","children":"let add1 = (arg1) => {\n  let args = [arg1]\n  const fn = (arg2) => {\n    args.push(arg2)\n    return fn\n  }\n  fn.toString = () => {\n    return args.reduce((prev, item) => {\n      return prev + item\n    }, 0)\n  }\n  return fn\n}\n"}]}],"\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"更加通用的实现："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"text-sm p-1","children":"const add = (...arg1) => {\n  let args = [...arg1]\n  const fn = (...arg2) => {\n    args = [...args, ...arg2]\n    return fn\n  }\n  fn.toString = function () {\n    return args.reduce((prev, item) => prev + item, 0)\n  }\n  return fn\n}\n"}]}],"\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"例题 2: 编写一个通用的 curry 函数\n首先明确概念，Function.length 指明函数形参的个数"}],"\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"实现原理：\n先用闭包把传入参数保存起来，当传入参数的数量足够执行函数时，就开始执行函数。步骤："}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"先逐步接受参数，并进行存储，以供后续使用"}],"\n",["$","li",null,{"children":"先不进行函数计算，延后执行"}],"\n",["$","li",null,{"children":"在符合条件时，根据存储的参数，统一传给函数进行计算"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"text-sm p-1","children":"const curry = (fn) => {\n  return (tempFn = (...arg1) => {\n    if (arg1.length >= fn.length) {\n      return fn(...arg1)\n    } else {\n      return (...arg2) => tempFn(...arg1, ...arg2)\n    }\n  })\n}\n"}]}],"\n",["$","h2",null,{"children":"反 curry 化"}],"\n",["$","p",null,{"className":"text-[14px] text-neutral-100 dark:text-neutral-800 ","children":"没有理解"}],"\n",["$","h2",null,{"children":"偏函数 partial"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"text-sm p-1","children":"const partial =\n  (fn, ...rest) =>\n  (...args) =>\n    fn(...rest, ...args)\n"}]}],"\n",["$","h2",null,{"children":"函子 functor"}],"\n",["$","h3",null,{"children":"of 函子"}],"\n",["$","h3",null,{"children":"maybe 函子"}]]
