3:I[9275,[],""]
5:I[1343,[],""]
6:I[9512,["291","static/chunks/291-6bbee38a07e9cada.js","185","static/chunks/app/layout-3bb9540adf3efcfb.js"],"ThemeProvider"]
7:I[8871,["291","static/chunks/291-6bbee38a07e9cada.js","185","static/chunks/app/layout-3bb9540adf3efcfb.js"],"default"]
4:["slug","%E5%89%8D%E7%AB%AF%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95","d"]
0:["vWVJ_ukauau6HJfuHRxA7",[[["",{"children":["blog",{"children":[["slug","%E5%89%8D%E7%AB%AF%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95","d"],{"children":["__PAGE__?{\"slug\":\"前端经典算法\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","%E5%89%8D%E7%AB%AF%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cb67a214fed64752.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__variable_c1e5c9 __variable_3a0388","children":["$","$L6",null,{"attribute":"class","children":[["$","$L7",null,{}],["$","main",null,{"className":"flex max-w-2xl mx-auto bg-gradient","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/14d650bd7f8bf870.css","precedence":"next","crossOrigin":"$undefined"}]],"$L8"]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Create Next App"}],["$","meta","3",{"name":"description","content":"Generated by create next app"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
2:["$","main",null,{"className":"font-mono","children":[["$","h1",null,{"children":"前端经典算法"}],["$","div",null,{"className":"text-[14px] text-tertiary mt-1","children":"2021-02-02"}],["$","div",null,{"className":"markdown mt-10","children":"$L9"}]]}]
9:[["$","h2",null,{"children":"尾递归"}],"\n",["$","h2",null,{"children":"洗牌算法"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"Array.prototype.shuffle = function () {\n  let arr = this\n  let length = arr.length\n  while (length) {\n    let random = Math.floor(Math.random() * length--)\n    console.log(length)\n    let temp = arr[length]\n    arr[length] = arr[random]\n    arr[random] = temp\n  }\n  return arr\n}\n"}]}],"\n",["$","h2",null,{"children":"快速排序"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"初级实现："}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"var arr = [1, 5, 4, 3, 2]\nfunction quickSort(arr) {\n  const len = arr.length\n  console.log(len)\n  if (len <= 1) {\n    return arr.slice()\n  }\n  let leftArr = []\n  let rightArr = []\n  let middleArr = []\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < arr[len - 1]) {\n      leftArr.push(arr[i])\n    } else if (arr[i] === arr[len - 1]) {\n      middleArr.push(arr[i])\n    } else {\n      rightArr.push(arr[i])\n    }\n  }\n  return quickSort(leftArr).concat(middleArr, quickSort(rightArr))\n}\nquickSort(arr)\n"}]}],"\n",["$","ol",null,{"start":"2","children":["\n",["$","li",null,{"children":"在原数组中操作："}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"var arr = [4, 1, 5, 3, 2]\nvar arr1 = [2, 1, 4, 3, 5]\nconst quickSort = (array, start, end) => {\n  start = start === undefined ? 0 : start\n  end = end === undefined ? arr.length - 1 : end\n  if (start >= end) {\n    return\n  }\n  let value = array[start]\n  let i = start\n  let j = end\n  while (i < j) {\n    // 找出右边第一个小于参照数的下标并记录\n    while (i < j && array[j] >= value) {\n      j--\n    }\n\n    if (i < j) {\n      arr[i++] = arr[j]\n    }\n\n    // 找出左边第一个大于参照数的下标，并记录\n    while (i < j && array[i] < value) {\n      i++\n    }\n\n    if (i < j) {\n      arr[j--] = arr[i]\n    }\n  }\n\n  arr[i] = value\n\n  quickSort(array, start, i - 1)\n  quickSort(array, i + 1, end)\n}\n"}]}],"\n",["$","h2",null,{"children":"插入排序"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"简单的实现"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"var arr = [2, 1, 4, 3, 5]\nfunction insertSort(array) {\n  const len = array.length\n  // 定义有序数组最后一个索引；\n  let preIndex\n  // 定义无序数组第一个值；\n  let current\n  for (let i = 1; i < len; i++) {\n    preIndex = i - 1\n    current = arr[i]\n    // 插入操作\n    while (preIndex >= 0 && current < arr[preIndex]) {\n      array[preIndex + 1] = array[preIndex]\n      preIndex--\n    }\n    array[preIndex + 1] = current\n  }\n  return array\n}\ninsertSort(arr)\n"}]}],"\n",["$","ol",null,{"start":"2","children":["\n",["$","li",null,{"children":"使用 reduce 实现"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const insertSort = (array) => array.reduce(insert, [])\nconst insert = (sortedArray, value) => {\n  const len = sortedArray.length\n  let j = len - 1\n  while (j >= 0 && sortedArray[j] > value) {\n    sortedArray[j + 1] = sortedArray[j]\n    j--\n  }\n  sortedArray[j + 1] = value\n  return sortedArray\n}\ninsertSort([2, 4, 3, 1])\n"}]}],"\n",["$","h2",null,{"children":"二分查找"}],"\n",["$","p",null,{"children":"二分查找插入法"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const insert = (sortedArray, value) => {\n  const length = sortedArray.length\n  if (length === 0) {\n    sortedArray.push(value)\n    return sortedArray\n  }\n  let i = 0\n  let j = length\n  let mid\n  if (value < sortedArray[0]) {\n    return sortedArray.unshift(value), sortedArray\n  }\n  if (value >= sortedArray[length - 1]) {\n    return sortedArray.push(value), sortedArray\n  }\n  // 开始二分查找\n  while (i < j) {\n    mid = ((i + j) / 2) | 0\n    if (i === mid) {\n      break\n    }\n    if (value < sortedArray[mid]) {\n      j = mid\n    }\n    if (value > sortedArray[mid]) {\n      i = mid\n    }\n  }\n  let midArray = [value]\n  let lastArray = sortedArray.slice(i + 1)\n  sortedArray = sortedArray\n    .slice(0, i + 1)\n    .concat(midArray)\n    .concat(lastArray)\n  return sortedArray\n}\n"}]}],"\n",["$","h2",null,{"children":"Timsort 实现"}],"\n",["$","p",null,{"children":"结合归并排序与插入排序"}],"\n",["$","h2",null,{"children":"交换星号"}],"\n",["$","p",null,{"children":"题目：一个字符串中只包含 _ 和数字，请把 _ 号都放开头。"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":";[\"*\", 1, 2, \"*\"].reduce((arr, value) => {\n  const length = arr.length\n  let i = 0\n  if (value === \"*\") {\n    while (i < length) {\n      if (arr[i] != \"*\") {\n        break\n      }\n      i++\n    }\n    let lastArr = arr.slice(i)\n    return arr.slice(0, i).concat([\"*\"]).concat(lastArr)\n  } else {\n    arr.push(value)\n    return arr\n  }\n}, [])\n"}]}],"\n",["$","h2",null,{"children":"最长不重复子串"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"暴力解法"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"var str1 = \"abcabcbb\"\n\nfunction getLongestStr(str) {\n  const len = str.length\n  let start = 0\n  let end = 1\n  // let subStr = '';\n  let max = 0\n  for (let i = 0; i < len; i++) {\n    let subStr = \"\"\n    for (let j = i; j < len; j++) {\n      if (subStr.indexOf(str[j]) === -1) {\n        subStr += str[j]\n        console.log(subStr)\n      } else {\n        max = subStr.length > max ? subStr.length : max\n        break\n      }\n    }\n  }\n  return max\n}\ngetLongestStr(str1)\n"}]}],"\n",["$","ol",null,{"start":"2","children":["\n",["$","li",null,{"children":"滑动窗口解法，保证窗口[i..j]之间没有重复字符"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let str1 = \"acdafbfsifaadcsacddeac\"\nfunction getLongestSubstr(str) {\n  let obj = {}\n  let result = 0\n  let len = str.length\n  for (let i = 0, j = 0; ; i++) {\n    // 获取窗口的结束位置\n    while (j < len && !obj[str[j]]) {\n      obj[str[j++]] = true\n    }\n    // 得到子串的长度\n    result = Math.max(result, j - i)\n    // 循环结束\n    if (j >= len) {\n      console.log(i, j)\n      break\n    }\n    // 获取窗口的开始位置\n    while (str[i] != str[j]) {\n      obj[str[i++]] = false\n    }\n    obj[str[i]] = false\n  }\n  console.log(obj)\n  return result\n}\ngetLongestSubstr(str1)\n"}]}],"\n",["$","h2",null,{"children":"爬楼梯算法"}],"\n",["$","p",null,{"children":"题目：假设我们需要爬一个楼梯，这个楼梯一共有 N 阶，可以一步跨越 1 个或者 2 个台阶，那么爬完楼梯一共有多少种方式？"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"普通递归解法"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let num = 10\nfunction getSteps(n) {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  return getSteps(n - 1) + getSteps(n - 2)\n}\ngetSteps(num)\n"}]}],"\n",["$","ol",null,{"start":"2","children":["\n",["$","li",null,{"children":"优化递归解法"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let num = 10\nfunction getSteps(n) {\n  let arr = []\n  const step = (n) => {\n    if (n === 1) return 1\n    if (n === 2) return 2\n    if (arr[n] > 0) return arr[n]\n    arr[n] = step(n - 1) + step(n - 2)\n    return arr[n]\n  }\n  return step(n)\n}\ngetSteps(num)\n"}]}],"\n",["$","h2",null,{"children":"所有数相加（回溯算法）"}],"\n",["$","p",null,{"children":"题目：给定一组不含重复数字的非负数组和一个非负目标数字，在数组中找出所有数加起来等于给定的目标数字的组合。"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const array = [2, 3, 6, 7]\nconst target = 7\nconst find = (array, target) => {\n  // 结果数组\n  let result = []\n  // 深度优先遍历,数组索引,目标和,临时数组\n  const dfs = (index, sum, tmpArray) => {\n    if (sum === target) {\n      result.push(tmpArray.slice())\n    }\n    // 如果大于,则直接返回\n    if (sum > target) {\n      return\n    }\n    // 这里是关键代码\n    for (let i = index; i < array.length; i++) {\n      tmpArray.push(array[i])\n      dfs(i, sum + array[i], tmpArray)\n      tmpArray.pop()\n    }\n  }\n  dfs(0, 0, [])\n  return result\n}\n"}]}],"\n",["$","p",null,{"children":"高级解法："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"var combinationSum = function (\n  candidates,\n  target,\n  finalArr = [],\n  currArr = [],\n  startFrom = 0\n) {\n  if (target < 0) {\n    return finalArr\n  }\n  if (target === 0) {\n    finalArr.push(currArr.slice())\n    return finalArr\n  }\n  for (let i = startFrom; i < candidates.length; i++) {\n    const currCandidate = candidates[i]\n    currArr.push(currCandidate)\n    combinationSum(candidates, target - currCandidate, finalArr, currArr, i)\n    currArr.pop()\n  }\n  return finalArr\n}\n"}]}],"\n",["$","h2",null,{"children":"深度遍历"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"function bfs(node) {\n  var queue = []\n  let result = []\n  queue.push(node)\n  while (queue.length) {\n    var item = queue.shift()\n    result.push(item.value)\n    item.left && queue.push(item.left)\n    item.right && queue.push(item.right)\n  }\n  return result\n}\nvar node = {\n  value: 0,\n  left: { value: 1, left: { value: 3 }, right: { value: 4 } },\n  right: { value: 2 },\n}\nconsole.log(bfs(node))\n"}]}],"\n",["$","h2",null,{"children":"从一个数组中找出 N 个数，其和为 M 的所有可能。"}],"\n",["$","p",null,{"children":"讲解文章：https://juejin.im/post/5c81fee66fb9a049b82b4128"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const find = (array, target, sum) => {\n  const len = array.length\n  let result = []\n\n  for (let i = 0; i < Math.pow(2, len); i++) {\n    if (getCount(i) == target) {\n      let s = 0\n      let temp = []\n      for (let j = 0; j < len; j++) {\n        if (i & (1 << (len - 1 - j))) {\n          s += array[j]\n          temp.push(array[j])\n        }\n      }\n      if (s == sum) {\n        result.push(temp)\n      }\n    }\n  }\n  return result\n}\n\nfunction getCount(i) {\n  let count = 0\n  while (i) {\n    if (i & 1) {\n      ++count\n    }\n    i >>= 1\n  }\n  return count\n}\n\nconst result = find([1, 2, 3, 4], 2, 4)\nconsole.log(result)\n"}]}],"\n",["$","h2",null,{"children":"有序数组去重，返回去重后数组的新长度"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let array = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]\nfunction removeDup(arr) {\n  let newArr = []\n  let len = arr.length\n  let result = 0\n  for (let i = 0; i < len - 1; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      result++\n      newArr.push(arr[i])\n    }\n  }\n  console.log(newArr)\n  return result\n}\nremoveDup(array)\n"}]}],"\n",["$","h2",null,{"children":"求数组中的众数"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"普通解法："}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let arr = [3, 3, 2]\nfunction getMostNum(arr) {\n  let map = {}\n  for (let i = 0; i < arr.length; i++) {\n    if (!map[arr[i]]) {\n      map[arr[i]] = 1\n    } else {\n      map[arr[i]]++\n    }\n    if ((map[arr[i]] > arr.length / 2) | 0) {\n      return arr[i]\n    }\n  }\n}\ngetMostNum(arr)\n"}]}],"\n",["$","ol",null,{"start":"2","children":["\n",["$","li",null,{"children":"高效解法："}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js"}]}]]
