3:I[9275,[],""]
5:I[1343,[],""]
6:I[9512,["291","static/chunks/291-6bbee38a07e9cada.js","185","static/chunks/app/layout-63fef89d60d429d4.js"],"ThemeProvider"]
7:I[8871,["291","static/chunks/291-6bbee38a07e9cada.js","185","static/chunks/app/layout-63fef89d60d429d4.js"],"default"]
4:["slug","two-sum","d"]
0:["pRzpiwg6pXJZjwfKMKBnX",[[["",{"children":["blog",{"children":[["slug","two-sum","d"],{"children":["__PAGE__?{\"slug\":\"two-sum\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","two-sum","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cb67a214fed64752.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__variable_c1e5c9 __variable_3a0388","children":["$","$L6",null,{"attribute":"class","children":[["$","$L7",null,{}],["$","main",null,{"className":"flex max-w-2xl mx-auto bg-gradient","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/14d650bd7f8bf870.css","precedence":"next","crossOrigin":"$undefined"}]],"$L8"]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Create Next App"}],["$","meta","3",{"name":"description","content":"Generated by create next app"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
2:["$","main",null,{"className":"font-mono","children":[["$","h1",null,{"children":"两数之和"}],["$","div",null,{"className":"text-[14px] text-tertiary mt-1","children":"2020-07-06"}],["$","div",null,{"className":"markdown mt-10","children":"$L9"}]]}]
9:[["$","p",null,{"children":"两数之和是一个最基础的算法，今天由浅入深的分析下这个问题。"}],"\n",["$","h2",null,{"children":"1.0 基础版 普通数组的两数之和"}],"\n",["$","p",null,{"children":"给定一个整数数组 nums  和一个目标值 target，请你在该数组中找出和为目标值的那   两个   整数，并返回他们的数组下标。"}],"\n",["$","p",null,{"children":"你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。"}],"\n",["$","h3",null,{"children":"示例:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-log","children":"给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n"}]}],"\n",["$","h3",null,{"children":"思路"}],"\n",["$","p",null,{"children":"第一种思路，典型的双循环，每个元素都与其他元素进行一个组合，找到第一个符合条件的。"}],"\n",["$","p",null,{"children":"第二种思路，一次遍历，使用一个 map 存储，key 为数组的值，value 为索引。当遍历到某个元素时，查看对应的值是否存在，如果存在，则返回。"}],"\n",["$","h3",null,{"children":"解答"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-jsx","children":"function twoSum(nums, target) {\n  let map = {}\n  for (let i = 0; i < nums.length; i++) {\n    const key = target - nums[i]\n    const element = nums[i]\n    if (map[element] === undefined) {\n      map[key] = i\n    } else {\n      return [map[element], i]\n    }\n  }\n}\n"}]}],"\n",["$","h2",null,{"children":"2.0 进阶版，有序数组的两数之和"}],"\n",["$","p",null,{"children":"给定一个已按照升序排列   的有序数组，找到两个数使得它们相加之和等于目标数。"}],"\n",["$","p",null,{"children":"函数应该返回这两个下标值 index1 和 index2，其中 index1  必须小于  index2。"}],"\n",["$","h3",null,{"children":"说明:"}],"\n",["$","p",null,{"children":"返回的下标值（index1 和 index2）不是从零开始的。\n你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。"}],"\n",["$","h3",null,{"children":"示例:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-log","children":"输入: numbers = [2, 7, 11, 15], target = 9\n输出: [1,2]\n解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n"}]}],"\n",["$","h3",null,{"children":"思路："}],"\n",["$","p",null,{"children":"注意是有序数组，所以可以给定双指针，一个指向头部，一个指向尾部，当指针所指向的元素之和大于 target，则可以移动大元素的指针向前，反之移动小元素的指针向后，直到和为 target。"}],"\n",["$","h3",null,{"children":"解答："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-jsx","children":"var twoSum = function (numbers, target) {\n  let len = numbers.length\n  let start = 0\n  let end = len - 1\n  while (start < end) {\n    if (numbers[start] + numbers[end] > target) {\n      end = end - 1\n    } else if (numbers[start] + numbers[end] < target) {\n      start = start + 1\n    } else {\n      return [start + 1, end + 1]\n    }\n  }\n}\n"}]}],"\n",["$","h2",null,{"children":"3.0 两数之和 III - 数据结构设计"}],"\n",["$","p",null,{"children":"本题属于 leetcode 会员才能看的，是一个类的设计题，以后要是成为 leetcode 会员再来补上。"}],"\n",["$","h2",null,{"children":"4.0 终极版 BST 的两数之和"}],"\n",["$","p",null,{"children":"给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。"}],"\n",["$","p",null,{"children":"案例 1:"}],"\n",["$","p",null,{"children":"输入:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-log","children":"    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 9\n\n输出: True\n"}]}],"\n",["$","p",null,{"children":"案例 2:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-log","children":"输入:\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 28\n\n输出: False\n"}]}],"\n",["$","h3",null,{"children":"思路"}],"\n",["$","p",null,{"children":"BST 搜索二叉树的特点就是中序遍历后会得到一个有序数组。所以可以先中序遍历，后使用之前的方法。"}],"\n",["$","h3",null,{"children":"解答"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-jsx","children":"var findTarget = function (root, k) {\n  let arr = []\n  var getTree = function (root) {\n    if (root) {\n      getTree(root.left)\n      arr.push(root.val)\n      getTree(root.right)\n    }\n  }\n  getTree(root)\n  return twoSum(arr, k)\n}\n\nvar twoSum = function (numbers, target) {\n  let len = numbers.length\n  let start = 0\n  let end = len - 1\n  while (start < end) {\n    if (numbers[start] + numbers[end] > target) {\n      end = end - 1\n    } else if (numbers[start] + numbers[end] < target) {\n      start = start + 1\n    } else {\n      return true\n    }\n  }\n  return false\n}\n"}]}]]
