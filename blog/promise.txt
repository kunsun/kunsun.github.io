3:I[9275,[],""]
5:I[1343,[],""]
6:I[9512,["291","static/chunks/291-6bbee38a07e9cada.js","185","static/chunks/app/layout-3bb9540adf3efcfb.js"],"ThemeProvider"]
7:I[8871,["291","static/chunks/291-6bbee38a07e9cada.js","185","static/chunks/app/layout-3bb9540adf3efcfb.js"],"default"]
4:["slug","promise","d"]
0:["zfWWkEPTd4BtmYFJI25CP",[[["",{"children":["blog",{"children":[["slug","promise","d"],{"children":["__PAGE__?{\"slug\":\"promise\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","promise","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cb67a214fed64752.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh-CN","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__variable_c1e5c9 __variable_3a0388","children":["$","$L6",null,{"attribute":"class","children":[["$","$L7",null,{}],["$","main",null,{"className":"flex max-w-2xl mx-auto bg-gradient","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/14d650bd7f8bf870.css","precedence":"next","crossOrigin":"$undefined"}]],"$L8"]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Create Next App"}],["$","meta","3",{"name":"description","content":"Generated by create next app"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
2:["$","main",null,{"className":"font-mono","children":[["$","h1",null,{"children":"Promise"}],["$","div",null,{"className":"text-[14px] text-tertiary mt-1","children":"2021-02-02"}],["$","div",null,{"className":"markdown mt-10","children":"$L9"}]]}]
a:T66a,function Promise(executor) {
  this.status = "pending"
  this.value = null
  this.reason = null
  this.onFulfilledFunc = Function.prototype
  this.onRejectedFunc = Function.prototype

  // 自己的resolve函数，由调用者触发
  const resolve = (value) => {
    if (value instanceof Promise) {
      return value.then(resolve, reject)
    }
    setTimeout(() => {
      if (this.status === "pending") {
        this.value = value
        this.status = "fulfilled"
        this.onFulfilledFunc(this.value)
      }
    })
  }
  // 自己的reject函数，由调用者触发
  const reject = (reason) => {
    setTimeout(() => {
      if (this.status === "pending") {
        this.reason = reason
        this.status = "rejected"
        this.onRejectedFunc(this.reason)
      }
    })
  }
  // 调用时执行，参数是自己定义的reject与resolve
  // 立即执行
  executor(resolve, reject)
}

Promise.prototype.then = function (onfulfilled, onreject) {
  onfulfilled = typeof onfulfilled === "function" ? onfulfilled : (data) => data
  onrejected =
    typeof onrejected === "function"
      ? onrejected
      : (error) => {
          throw error
        }

  if (this.status === "fulfilled") {
    onfulfilled(this.value)
  }

  if (this.status === "rejected") {
    onrejected(this.value)
  }

  if (this.status === "pending") {
    this.onFulfilledFunc = onfulfilled
    this.onRejectedFunc = onrejected
  }
}

// 调用Promise，executor
let promise = new Promise((resolve, reject) => {
  resolve("data")
  setTimeout(() => {
    resolve("data")
  }, 2000)
})

promise.then((data) => {
  console.log(data)
})
console.log(1)
b:T542,function Promise(executor) {
  this.status = "pending"
  this.value = null
  this.reason = null
  this.onRejectedArr = []
  this.onFulfilledArr = []

  const resolve = (value) => {
    if (value instanceof Promise) {
      return value.then(resolve, reject)
    }
    setTimeout(() => {
      if (this.status === "pending") {
        this.value = value
        this.status = "fulfilled"
        this.onFulfilledArr.forEach((func) => {
          func(value)
        })
      }
    })
  }

  const reject = (reason) => {
    setTimeout(() => {
      if (this.status === "pending") {
        this.reason = reason
        this.status = "rejected"
        this.onRejectedArr.forEach((func) => {
          func(reason)
        })
      }
    })
  }

  try {
    executor(resolve, reject)
  } catch (e) {
    reject(e)
  }
}

Promise.prototype.then = function (onfulfilled, onrejected) {
  onfulfilled = typeof onfulfilled === "function" ? onfulfilled : (data) => data
  onrejected =
    typeof onrejected === "function"
      ? onrejected
      : (error) => {
          throw error
        }
  if (this.status === "fulfilled") {
    onfulfilled(this.value)
  }

  if (this.status === "rejected") {
    onrejected(this.value)
  }
  if (this.status === "pending") {
    this.onFulfilledArr.push(onfulfilled)
    this.onRejectedArr.push(onrejected)
  }
}
c:T58e,Promise.prototype.then = function (onfulfilled, onrejected) {
  onfulfilled = typeof onfulfilled === "function" ? onfulfilled : (data) => data
  onrejected =
    typeof onrejected === "function"
      ? onrejected
      : (error) => {
          throw error
        }
  let promise2
  if (this.status === "fulfilled") {
    return (promise2 = new Promise((resolve, reject) => {
      setTimeout(() => {
        try {
          let result = onfulfilled(this.value)
          resolve(result)
        } catch (e) {
          reject(e)
        }
      })
    }))
  }
  if (this.status === "rejected") {
    return (promise2 = new Promise((resolve, reject) => {
      setTimeout(() => {
        try {
          let result = onrejected(this.reason)
          reject(result)
        } catch (e) {
          reject(e)
        }
      })
    }))
  }
  if (this.status === "pending") {
    return (promise2 = new Promise((resolve, reject) => {
      this.onFulfilledArray.push(() => {
        setTimeout(() => {
          try {
            let result = onfulfilled(this.value)
            resolve(result)
          } catch (e) {
            reject(e)
          }
        })
      })
      this.onRejectedArr.push(() => {
        setTimeout(() => {
          try {
            let result = onrejected(this.reason)
            resolve(result)
          } catch (e) {
            reject(e)
          }
        })
      })
    }))
  }
}
d:T14e3,function Promise(executor) {
  this.status = "pending"
  this.value = null
  this.reason = null
  this.onFulfilledArray = []
  this.onRejectedArray = []

  const resolve = (value) => {
    if (value instanceof Promise) {
      return value.then(resolve, reject)
    }
    setTimeout(() => {
      if (this.status === "pending") {
        this.value = value
        this.status = "fulfilled"

        this.onFulfilledArray.forEach((func) => {
          func(value)
        })
      }
    })
  }

  const reject = (reason) => {
    setTimeout(() => {
      if (this.status === "pending") {
        this.reason = reason
        this.status = "rejected"

        this.onRejectedArray.forEach((func) => {
          func(reason)
        })
      }
    })
  }

  try {
    executor(resolve, reject)
  } catch (e) {
    reject(e)
  }
}

const resolvePromise = (promise2, result, resolve, reject) => {
  // 当 result 和 promise2 相等时，也就是说 onfulfilled 返回 promise2 时，进行 reject
  if (result === promise2) {
    return reject(new TypeError("error due to circular reference"))
  }

  // 是否已经执行过 onfulfilled 或者 onrejected
  let consumed = false
  let thenable

  if (result instanceof Promise) {
    if (result.status === "pending") {
      result.then(function (data) {
        resolvePromise(promise2, data, resolve, reject)
      }, reject)
    } else {
      result.then(resolve, reject)
    }
    return
  }

  let isComplexResult = (target) =>
    (typeof target === "function" || typeof target === "object") &&
    target !== null
  // 如果返回的是疑似 Promise 类型
  if (isComplexResult(result)) {
    try {
      thenable = result.then
      // 如果返回的是 Promise 类型，具有 then 方法
      if (typeof thenable === "function") {
        thenable.call(
          result,
          function (data) {
            if (consumed) {
              return
            }
            consumed = true

            return resolvePromise(promise2, data, resolve, reject)
          },
          function (error) {
            if (consumed) {
              return
            }
            consumed = true

            return reject(error)
          }
        )
      } else {
        return resolve(result)
      }
    } catch (e) {
      if (consumed) {
        return
      }
      consumed = true
      return reject(e)
    }
  } else {
    return resolve(result)
  }
}

Promise.prototype.then = function (onfulfilled, onrejected) {
  onfulfilled = typeof onfulfilled === "function" ? onfulfilled : (data) => data
  onrejected =
    typeof onrejected === "function"
      ? onrejected
      : (error) => {
          throw error
        }

  // promise2 将作为 then 方法的返回值
  let promise2

  if (this.status === "fulfilled") {
    return (promise2 = new Promise((resolve, reject) => {
      setTimeout(() => {
        try {
          // 这个新的 promise2 resolved 的值为 onfulfilled 的执行结果
          let result = onfulfilled(this.value)
          resolvePromise(promise2, result, resolve, reject)
        } catch (e) {
          reject(e)
        }
      })
    }))
  }
  if (this.status === "rejected") {
    return (promise2 = new Promise((resolve, reject) => {
      setTimeout(() => {
        try {
          // 这个新的 promise2 reject 的值为 onrejected 的执行结果
          let result = onrejected(this.reason)
          resolvePromise(promise2, result, resolve, reject)
        } catch (e) {
          reject(e)
        }
      })
    }))
  }
  if (this.status === "pending") {
    return (promise2 = new Promise((resolve, reject) => {
      this.onFulfilledArray.push((value) => {
        try {
          let result = onfulfilled(value)
          resolvePromise(promise2, result, resolve, reject)
        } catch (e) {
          return reject(e)
        }
      })

      this.onRejectedArray.push((reason) => {
        try {
          let result = onrejected(reason)
          resolvePromise(promise2, result, resolve, reject)
        } catch (e) {
          return reject(e)
        }
      })
    }))
  }
}

Promise.prototype.catch = function (catchFunc) {
  return this.then(null, catchFunc)
}

Promise.resolve = function (value) {
  return new Promise((resolve, reject) => {
    resolve(value)
  })
}

Promise.reject = function (value) {
  return new Promise((resolve, reject) => {
    reject(value)
  })
}

Promise.race = function (promiseArray) {
  if (!Array.isArray(promiseArray)) {
    throw new TypeError("The arguments should be an array!")
  }
  return new Promise((resolve, reject) => {
    try {
      const length = promiseArray.length
      for (let i = 0; i < length; i++) {
        promiseArray[i].then(resolve, reject)
      }
    } catch (e) {
      reject(e)
    }
  })
}

Promise.all = function (promiseArray) {
  if (!Array.isArray(promiseArray)) {
    throw new TypeError("The arguments should be an array!")
  }
  return new Promise((resolve, reject) => {
    try {
      let resultArray = []

      const length = promiseArray.length

      for (let i = 0; i < length; i++) {
        promiseArray[i].then((data) => {
          resultArray.push(data)

          if (resultArray.length === length) {
            resolve(resultArray)
          }
        }, reject)
      }
    } catch (e) {
      reject(e)
    }
  })
}
9:[["$","p",null,{"children":"Promise 构造函数返回一个 promise 对象实例，这个返回的 promise 具有 then 方法。then 方法中，调用者可以定义两个参数，分别是 onfulfilled 和 onrejected，他们都是函数类型。\n其中 onfulfilled 通过参数可以获取 promise 对象的 resolved 的值；onrejected 获得 promise 对象 rejected 的值。通过这个值，我们来处理异步完成后的逻辑。\n通过这个值，处理异步完成后的逻辑。"}],"\n",["$","h2",null,{"children":"第一步"}],"\n",["$","p",null,{"children":"建立结构"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-javascript","children":"function Promise(executor) {}\nPromise.prototype.then = function (onfulfilled, onrejected) {}\n"}]}],"\n",["$","h2",null,{"children":"第二步"}],"\n",["$","p",null,{"children":"完善基本框架"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"function Promise(executor) {\n  const self = this\n  this.status = \"pending\"\n  this.value = null\n  this.reason = null\n\n  function resolve(value) {\n    self.value = value\n  }\n\n  function reject(value) {\n    self.reason = reason\n  }\n\n  executor(resolve, reject)\n}\n\nPromise.prototype.then = function (\n  onfulfilled = Function.prototype,\n  onrejected = Function.prototype\n) {\n  onfulfilled(this.value)\n  onrejected(this.reason)\n}\n"}]}],"\n",["$","h2",null,{"children":"第三步"}],"\n",["$","p",null,{"children":"加入异步逻辑：在合适的时候再执行 resolve"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"$a"}]}],"\n",["$","h2",null,{"children":"第四步：加入任务队列逻辑"}],"\n",["$","p",null,{"children":"使用 setTimeout 模拟"}],"\n",["$","h2",null,{"children":"第五步：细节优化"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"抛出错误"}],"\n",["$","li",null,{"children":"将 onFulfilledFunc 存入数组"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-javascript","children":"$b"}]}],"\n",["$","h2",null,{"children":"第六步：链式调用"}],"\n",["$","p",null,{"children":"一个 Promise 实例的 then 方法体 onfulfilled 函数和 onrejected 函数中，是支持再次返回一个 Promise 实例的，也支持返回非 Promise 的普通值。\n修改 Promise.prototype.then:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"$c"}]}],"\n",["$","h2",null,{"children":"第七步：完善链式调用"}],"\n",["$","p",null,{"children":"这里的逻辑有些复杂"}],"\n",["$","h2",null,{"children":"第八步：Promise 穿透实现"}],"\n",["$","p",null,{"children":"如果 then 传入的 onfulfilled 与 onrejected 不为函数，则使用默认值"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-javascript","children":"const promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"kunsun\")\n  }, 2000)\n})\npromise.then(null).then((data) => {\n  console.log(data)\n})\n"}]}],"\n",["$","h2",null,{"children":"第九步：Promise 静态方法与其他方法实现"}],"\n",["$","h3",null,{"children":"Promise.prototype.catch"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"Promise.prototype.catch = function (catchFunc) {\n  return this.then(null, catchFunc)\n}\n"}]}],"\n",["$","h3",null,{"children":"Promise.resolve"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"Promise.resolve = function (value) {\n  return new Promise((resolve, reject) => {\n    resolve(value)\n  })\n}\n"}]}],"\n",["$","h3",null,{"children":"Promise.reject"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"Promise.reject = function (value) {\n  return new Promise((resolve, reject) => {\n    reject(value)\n  })\n}\n"}]}],"\n",["$","h3",null,{"children":"Promise.all"}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"Promise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都完成时才 resolve。如果参数中 promise 有一个失败（rejected）,此实例失败，失败原因是第一个失败 promise 的结果。"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-javascript","children":"Promise.all = function (promiseArr) {\n  if (!Array.isArray(promiseArr)) {\n    throw new Error(\"参数不是数组\")\n  }\n  return new Promise((resolve, reject) => {\n    try {\n      let resolveArr = []\n      const length = promiseArr.length\n      for (let i = 0; i < length; i++) {\n        promiseArr[i].then((data) => {\n          resolveArr.push(data)\n          if (resolveArr.length === length) {\n            resolve(resolveArr)\n          }\n        }, reject)\n      }\n    } catch (e) {\n      reject(e)\n    }\n  })\n}\n"}]}],"\n",["$","h3",null,{"children":"Promise.race"}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"当 iterable 参数里任何一个成功或失败，直接返回"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"Promise.race = function (promiseArr) {\n  if (!Array.isArray(promiseArr)) {\n    throw new Error(\"参数不是数组\")\n  }\n  return new Promise((resolve, reject) => {\n    try {\n      const length = primiseArr.length\n      for (let i = 0; i < length; i++) {\n        promiseArray[i].then(resolve, reject)\n      }\n    } catch (e) {\n      reject(e)\n    }\n  })\n}\n"}]}],"\n",["$","h2",null,{"children":"最终代码"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-javascript","children":"$d"}]}],"\n",["$","h2",null,{"children":"总结"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Promise 可以保持某个 pending 一段时间"}],"\n",["$","li",null,{"children":"Promise 需要处理错误"}],"\n",["$","li",null,{"children":"Promise 实例添加多个 then"}],"\n",["$","li",null,{"children":"链式调用"}],"\n",["$","li",null,{"children":"Promise 穿透"}],"\n",["$","li",null,{"children":"静态方法"}],"\n"]}]]
