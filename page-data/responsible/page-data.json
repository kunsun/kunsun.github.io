{"componentChunkName":"component---src-templates-blog-post-js","path":"/responsible/","result":{"data":{"site":{"siteMetadata":{"title":"kunsun"}},"markdownRemark":{"html":"<h2>典型的方案：</h2>\n<ol>\n<li>传统 float 浮动布局</li>\n<li>相对单位布局</li>\n<li>媒体查询</li>\n<li>基于相对单位 rem 的 flexible 布局</li>\n<li>flex 布局</li>\n<li>grid 布局</li>\n<li>借助 JavaScript</li>\n</ol>\n<h2>CSS 中的相对单位</h2>\n<ol>\n<li>em</li>\n<li>rem</li>\n<li>vh, vw, wmin, wmax</li>\n<li>%</li>\n<li>calc()</li>\n</ol>\n<h2>各种单位概念</h2>\n<ol>\n<li>屏幕分辨率</li>\n<li>像素</li>\n<li>PPI 每英寸包括的像素数</li>\n<li>DPI 即每英寸包括的点数</li>\n<li>设备独立像素</li>\n<li>设备像素比（dpr） devicePixelRatio</li>\n<li>Meta Viewport</li>\n</ol>\n<h2>像素</h2>\n<ol>\n<li>物理像素（设备像素）： 与设备分辨率相关</li>\n<li>逻辑像素（独立像素）： 用来描述布局，一般为屏幕大小</li>\n<li>像素比：决定了一个 css 像素点由多少个设备像素点来描绘</li>\n</ol>\n<h2>视图</h2>\n<p>参考官方文章：<a href=\"https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag\">https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag</a></p>\n<ol>\n<li>布局视图 document.documentElement.clientWidth</li>\n<li>视觉视图</li>\n<li>理想视图：设备尺寸</li>\n</ol>\n<p>width=device-width; 布局视图等于理想视图</p>\n<deckgo-highlight-code language=\"html\" terminal=\"carbon\"  >\n          <code slot=\"code\">&lt;meta\n  name=&quot;viewport&quot;\n  content=&quot;width=device-width;initial-scale=1;maximum-scale=1; minimum-scale=1; user-scalable=no;&quot;\n/&gt;</code>\n        </deckgo-highlight-code>\n<h2>REM 布局的实现</h2>\n<p>淘宝首页的用法</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\"  >\n          <code slot=\"code\">!(function (e, t) {\n  var n = t.documentElement,\n    d = e.devicePixelRatio || 1\n  function i() {\n    var e = n.clientWidth / 3.75\n    n.style.fontSize = e + &quot;px&quot;\n  }\n  if (\n    ((function e() {\n      t.body\n        ? (t.body.style.fontSize = &quot;16px&quot;)\n        : t.addEventListener(&quot;DOMContentLoaded&quot;, e)\n    })(),\n    i(),\n    e.addEventListener(&quot;resize&quot;, i),\n    e.addEventListener(&quot;pageshow&quot;, function (e) {\n      e.persisted &amp;&amp; i()\n    }),\n    2 &lt;= d)\n  ) {\n    var o = t.createElement(&quot;body&quot;),\n      a = t.createElement(&quot;div&quot;)\n    ;(a.style.border = &quot;.5px solid transparent&quot;),\n      o.appendChild(a),\n      n.appendChild(o),\n      1 === a.offsetHeight &amp;&amp; n.classList.add(&quot;hairlines&quot;),\n      n.removeChild(o)\n  }\n})(window, document)\n\n!(function (e, t) {\n  var n = t.documentElement,\n    d = e.devicePixelRatio || 1\n\n  function i() {\n    var e = n.clientWidth / 3.75\n    n.style.fontSize = e + &quot;px&quot;\n  }\n  //\n  if (\n    ((function e() {\n      t.body\n        ? (t.body.style.fontSize = &quot;16px&quot;)\n        : t.addEventListener(&quot;DOMContentLoaded&quot;, e)\n    })(),\n    i(),\n    e.addEventListener(&quot;resize&quot;, i),\n    e.addEventListener(&quot;pageshow&quot;, function (e) {\n      e.persisted &amp;&amp; i()\n    }),\n    2 &lt;= d)\n  ) {\n    var o = t.createElement(&quot;body&quot;),\n      a = t.createElement(&quot;div&quot;)\n    ;(a.style.border = &quot;.5px solid transparent&quot;),\n      o.appendChild(a),\n      n.appendChild(o),\n      1 === a.offsetHeight &amp;&amp; n.classList.add(&quot;hairlines&quot;),\n      n.removeChild(o)\n  }\n})(window, document)</code>\n        </deckgo-highlight-code>\n<h3>REM 总结</h3>\n<p>要显示小于 1px 的边框，有两张方案：</p>\n<ol>\n<li>使用 drp 重新修改<meta name=\"viewport\" content=\"width=device-width; initial-scale=1/dpr, maximum-scale=1/dpr\" ></li>\n<li>或者使用 CSS ::before background-image:linear-greadient();</li>\n</ol>","frontmatter":{"date":"February 02, 2021","path":"/responsible","title":"响应式布局"}}},"pageContext":{"id":"bc1e2721-745d-58e2-9604-9994dc1a25e1"}},"staticQueryHashes":[],"slicesMap":{}}