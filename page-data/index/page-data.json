{"componentChunkName":"component---src-templates-blog-list-js","path":"/","result":{"data":{"allMarkdownRemark":{"nodes":[{"id":"d5fbc904-e168-5e18-9057-f66f52b4c506","frontmatter":{"date":"2021-02-14","title":"手写一个Promise","tags":["ES6"],"path":"/write-a-promise","banner":null},"excerpt":""},{"id":"7caa78ff-a5cb-50bf-b849-506c7216c8e9","frontmatter":{"date":"2021-02-02","title":"CSS知识点","tags":["CSS"],"path":"/css","banner":null},"excerpt":"默认 box-sizing: content-box; 计算 content\nbox-sizing: border-box; 计算 border+padding+content BFC / Block Formatting Context 一个 BFC 是一个独立容器，决定了元素如何对其内容进行定位，以及与其他元素的关系与相互作用。\n相关链接：https…"},{"id":"802585bb-52f7-5f1b-a0e5-3a2f3e591cd8","frontmatter":{"date":"2021-02-02","title":"HTTPS学习","tags":["计算机网络","HTTPS"],"path":"/https-learn","banner":null},"excerpt":"这个文章讲的特别清楚：https://juejin.im/post/6844903545272041479 https 相比 http…"},{"id":"93679bf0-90d7-522d-aa4c-16f94ffd20a5","frontmatter":{"date":"2021-02-02","title":"函数式编程","tags":["函数式编程","Javascript"],"path":"/functional-programing","banner":null},"excerpt":"参考书：https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content…"},{"id":"50c97e94-77e2-531d-a79e-681a69ba9ede","frontmatter":{"date":"2021-02-02","title":"Tree Shaking","tags":["Webpack"],"path":"/tree-shaking","banner":null},"excerpt":"uglify 擦除无用代码 概念 去掉 dead code\nDCE dead code elimination 代码不会被执行 代码执行的结果不会被用到 代码只会影响死变量 webpack 配置 webpack4 的 mode 设置为 production 自动开启 tree-shaking 原理 利用 ES6 模块化，ES6 模块的特点： import…"},{"id":"f69dbae6-2bc3-5e44-876a-c3e6b18f9827","frontmatter":{"date":"2021-02-02","title":"前端经典算法","tags":["算法"],"path":"/frontend_algorime","banner":null},"excerpt":"尾递归 洗牌算法 快速排序 初级实现： 在原数组中操作： 插入排序 简单的实现 使用 reduce 实现 二分查找 二分查找插入法 Timsort 实现 结合归并排序与插入排序 交换星号 题目：一个字符串中只包含 _ 和数字，请把 _ 号都放开头。 最长不重复子串 暴力解法 滑动窗口解法，保证窗口[i..j…"},{"id":"3a1e91c6-7e85-5e57-b862-d0d03f2956d6","frontmatter":{"date":"2021-02-02","title":"Webpack","tags":["Webpack"],"path":"/webpack","banner":null},"excerpt":"Loader 定义：loader 只是一个 Javascript 模块，此函数导出为函数 多个 loader 串行执行，从后到前执行，类似 Compose webpack 打包结果分析 打包结果就是一个 IIFE，称之为 webpackBootstrap，参数是 modules：modules 对象的 key 是依赖路径，value…"},{"id":"bc1e2721-745d-58e2-9604-9994dc1a25e1","frontmatter":{"date":"2021-02-02","title":"响应式布局","tags":["Web"],"path":"/responsible","banner":null},"excerpt":"典型的方案： 传统 float 浮动布局 相对单位布局 媒体查询 基于相对单位 rem 的 flexible 布局 flex 布局 grid 布局 借助 JavaScript CSS 中的相对单位 em rem vh, vw, wmin, wmax % calc() 各种单位概念 屏幕分辨率 像素 PPI 每英寸包括的像素数 DPI…"},{"id":"22bbb3fa-85ae-5d09-bbc1-cf15ea7fbbc2","frontmatter":{"date":"2021-02-02","title":"地址选择组件的开发","tags":["React","Component"],"path":"/address-component","banner":null},"excerpt":"地址数据: 父组件样式 地址选择组件样式 地址选择逻辑 更新 value： 保留当前 step 之前的选择，其余删除 更新 step 更新 list Tab 切换逻辑 更新 step 更新 list"},{"id":"5431cd8e-9f85-5958-90ed-6e77763b9e14","frontmatter":{"date":"2021-02-02","title":"性能优化","tags":["性能优化","前端工程化"],"path":"/performance","banner":null},"excerpt":"性能优化其实是一个开放式问题，非常依赖实践 前端性能涉及方方面面，优化角度切入点都有所不同。我认为，主要可以分为：页面工程优化和代码细节优化两大方向。 页面工程优化 网络协议 资源配置 浏览器性能 缓存 单页面应用的按需加载 延迟按需加载是有统计数据支持的 工程优化方向还有： 图片懒加载 合理设置缓存策略 使用 prefetch / preload…"}]}},"pageContext":{"limit":10,"skip":0,"numPages":2,"currentPage":1}},"staticQueryHashes":[],"slicesMap":{}}