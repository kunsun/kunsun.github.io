{"componentChunkName":"component---src-templates-blog-list-js","path":"/","result":{"data":{"allMarkdownRemark":{"nodes":[{"id":"d5fbc904-e168-5e18-9057-f66f52b4c506","frontmatter":{"date":"2021-02-14","title":"手写一个Promise","tags":["ES6"],"banner":null},"excerpt":""},{"id":"bc1e2721-745d-58e2-9604-9994dc1a25e1","frontmatter":{"date":"2021-02-02","title":"响应式布局","tags":["Web"],"banner":null},"excerpt":"典型的方案： 传统 float 浮动布局 相对单位布局 媒体查询 基于相对单位 rem 的 flexible 布局 flex 布局 grid 布局 借助 JavaScript CSS 中的相对单位 em rem vh, vw, wmin, wmax % calc() 各种单位概念 屏幕分辨率 像素 PPI 每英寸包括的像素数 DPI…"},{"id":"22bbb3fa-85ae-5d09-bbc1-cf15ea7fbbc2","frontmatter":{"date":"2021-02-02","title":"地址选择组件的开发","tags":["React","Component"],"banner":null},"excerpt":"地址数据: 父组件样式 地址选择组件样式 地址选择逻辑 更新 value： 保留当前 step 之前的选择，其余删除 更新 step 更新 list Tab 切换逻辑 更新 step 更新 list"},{"id":"93679bf0-90d7-522d-aa4c-16f94ffd20a5","frontmatter":{"date":"2021-02-02","title":"函数式编程","tags":["函数式编程","Javascript"],"banner":null},"excerpt":"参考书：https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content…"},{"id":"e0b651e9-96dd-55b5-a1b9-ad4f2fb47905","frontmatter":{"date":"2021-02-02","title":"Web 缓存","tags":["计算机网络","缓存"],"banner":null},"excerpt":"说到底缓存最重要的核心就是解决： 什么时候使用缓存 什么时候更新缓存 强缓存 HTTP1.1 服务端使用 Cache-control 这个响应头 private：表示私有缓存，不能被共有缓存代理服务器缓存，不能在用户间共享，可被用户的浏览器缓存。 public：表示共有缓存，可被代理服务器缓存，比如 CDN，允许多用户间共享 max-age…"},{"id":"f69dbae6-2bc3-5e44-876a-c3e6b18f9827","frontmatter":{"date":"2021-02-02","title":"前端经典算法","tags":["算法"],"banner":null},"excerpt":"尾递归 洗牌算法 快速排序 初级实现： 在原数组中操作： 插入排序 简单的实现 使用 reduce 实现 二分查找 二分查找插入法 Timsort 实现 结合归并排序与插入排序 交换星号 题目：一个字符串中只包含 _ 和数字，请把 _ 号都放开头。 最长不重复子串 暴力解法 滑动窗口解法，保证窗口[i..j…"},{"id":"03587f16-fad4-502c-89e8-c442d48e2d31","frontmatter":{"date":"2021-02-02","title":"前端设计模式","tags":["设计模式"],"banner":null},"excerpt":"…"},{"id":"5431cd8e-9f85-5958-90ed-6e77763b9e14","frontmatter":{"date":"2021-02-02","title":"性能优化","tags":["性能优化","前端工程化"],"banner":null},"excerpt":"性能优化其实是一个开放式问题，非常依赖实践 前端性能涉及方方面面，优化角度切入点都有所不同。我认为，主要可以分为：页面工程优化和代码细节优化两大方向。 页面工程优化 网络协议 资源配置 浏览器性能 缓存 单页面应用的按需加载 延迟按需加载是有统计数据支持的 工程优化方向还有： 图片懒加载 合理设置缓存策略 使用 prefetch / preload…"},{"id":"7bd60601-2168-5714-abcb-a3003f59e1f8","frontmatter":{"date":"2021-02-02","title":"移动端UI适配","tags":["CSS","Web"],"banner":null},"excerpt":"参考文章： https://juejin.im/post/5d736747e51d4561ff66688c https://juejin.im/post/5cddf289f265da038f77696c#heading-28 https://www.kancloud.cn/chandler/web_app/1477878 https://www…"},{"id":"fc0d1945-455e-526e-b109-447e8de34109","frontmatter":{"date":"2021-02-02","title":"指引表-前端工程化","tags":["工程化","webpack"],"banner":null},"excerpt":"概念 loader plugin tree shaking 优化 按需引入 代码分割 打包速度优化 多线程打包 优化打包路径 webpack4 配置最佳实践：https://juejin.im/post/5b304f1f51882574c72f19b0 webpack 原理 webpack 面试题：https://www.cxymsg.com/guide…"}]}},"pageContext":{"limit":10,"skip":0,"numPages":2,"currentPage":1}},"staticQueryHashes":[],"slicesMap":{}}