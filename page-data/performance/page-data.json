{"componentChunkName":"component---src-templates-blog-post-js","path":"/performance/","result":{"data":{"site":{"siteMetadata":{"title":"kunsun"}},"markdownRemark":{"html":"<p>性能优化其实是一个开放式问题，非常依赖实践</p>\n<blockquote>\n<p>前端性能涉及方方面面，优化角度切入点都有所不同。我认为，主要可以分为：页面工程优化和代码细节优化两大方向。</p>\n</blockquote>\n<h2>页面工程优化</h2>\n<ol>\n<li>网络协议</li>\n<li>资源配置</li>\n<li>浏览器性能</li>\n<li>缓存</li>\n</ol>\n<p>单页面应用的按需加载</p>\n<p>延迟按需加载是有统计数据支持的</p>\n<p>工程优化方向还有：</p>\n<ol>\n<li>图片懒加载</li>\n<li>合理设置缓存策略</li>\n<li>使用 prefetch / preload 预加载等特性</li>\n<li>以 tree shaking 手段为主的代码瘦身</li>\n</ol>\n<h3>如果发现页面动画卡顿，有哪些解决办法：</h3>\n<ol>\n<li>CSS3 动画会比基于 Javascript 动画效率高</li>\n<li>在使用 CSS3 实现动画时，考虑开启 GPU 加速</li>\n<li>优先使用消耗最低的 transform 和 opacity 两个属性</li>\n<li>对于只能使用 JavaScript 实现动画效果的情况，考虑 requestAnimationFrame、requestIdleCallback API</li>\n<li>批量进行样式变换，减少布局抖动</li>\n</ol>\n<p>如何理解 requestAnimationFrame 和 60 fps\n如何实现 requestAnimationFrame polyfill\n哪些操作会触发浏览器 reflow（重排）或者 repaint（重绘）\n对于给出的代码，如何进行优化\n如何实现滚动时的节流、防抖函数</p>\n<h2>代码细节优化</h2>\n<h3>布局抖动问题</h3>\n<p>布局抖动是指 DOM 元素被 JavaScript 多次反复读写，导致文档多次无意义重排。我们知道浏览器很“懒”，它会收集（batch）当前操作，统一进行重排。</p>\n<h3>window.requestAnimationFrame</h3>\n<blockquote>\n<p>该方法告诉浏览器你希望执行的操作，并请求浏览器在下一次重绘之前调用指定的函数来更新。</p>\n</blockquote>\n<p>requestAnimationFrame 是在主线程上完成</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\"  >\n          <code slot=\"code\">window.requestAnimationFrame(callback)</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\"  >\n          <code slot=\"code\">// 读\nvar h1 = element1.clientHeight\n// 写\nrequestAnimationFrame(() =&gt; {\n  element1.style.height = h1 * 2 + &quot;px&quot;\n})\n\n// 读\nvar h2 = element2.clientHeight\n// 写\nrequestAnimationFrame(() =&gt; {\n  element2.style.height = h2 * 2 + &quot;px&quot;\n})\n\n// 读\nvar h3 = element3.clientHeight\n// 写\nrequestAnimationFrame(() =&gt; {\n  element3.style.height = h3 * 2 + &quot;px&quot;\n})</code>\n        </deckgo-highlight-code>\n<h2>aync 与 defer 的区别</h2>\n<p>async 加载完立刻执行，加载 js 与文档可以异步执行， 不考虑依赖，例如 ga\ndefer 是在文档加载之后才执行</p>\n<p>fetch 和 ajax 的主要区别\n1、fetch()返回的 promise 将不会拒绝 http 的错误状态，即使响应是一个 HTTP 404 或者 500\n2、在默认情况下 fetch 不会接受或者发送 cookies</p>\n<p>reportWebVitals： <a href=\"https://segmentfault.com/a/1190000023223274\">https://segmentfault.com/a/1190000023223274</a></p>","frontmatter":{"date":"February 02, 2021","path":"/performance","title":"性能优化"}}},"pageContext":{"id":"5431cd8e-9f85-5958-90ed-6e77763b9e14"}},"staticQueryHashes":[],"slicesMap":{}}