{"version":3,"file":"component---src-templates-blog-list-js-c4dcac4223f9dfdc7278.js","mappings":"mLAyCA,MAzBiBA,IAAe,IAAd,KAAEC,GAAMD,EACxB,MAAME,EAAWD,EAAKE,YACtB,OACEC,EAAAA,cAACC,EAAAA,GAAI,CAACC,GAAIJ,EAASK,MACjBH,EAAAA,cAAA,OAAKI,UAAU,aACbJ,EAAAA,cAAA,OAAKI,UAAU,eACbJ,EAAAA,cAAA,UAAKF,EAASO,OACdL,EAAAA,cAAA,OAAKI,UAAU,QACZN,EAASQ,KACNR,EAASQ,KAAKC,KAAI,CAACC,EAAKC,IAEpBT,EAAAA,cAAA,OAAKI,UAAU,MAAMM,IAAKD,GAAG,IACzBD,KAIR,OAGRR,EAAAA,cAAA,OAAKI,UAAU,aAAaN,EAASa,OAElC,E,8BCgCX,MA1DkBC,IAKX,IALY,YACjBC,EAAW,MACXC,EAAK,SACLC,EAAQ,KACRC,GACDJ,EACC,MAAMK,EAA+B,IAAhBJ,EAAoBA,EAAcA,EAAc,EAC/DK,GAdOC,EAcYF,OAdI,IAAJG,IAAAA,EAAO,IAAZC,EAcmBN,EAAW,EAAIE,GAZlD,IAAIK,MAAMD,GACPE,UAAKC,GACLjB,KAAI,CAACkB,EAAGhB,MAAQU,EAAQV,EAAIW,GAAMM,QAAQ,KAC7C,IALQ,IAACP,EAAOE,EAAKD,EAezB,MAAMO,EAAiBT,EAAWU,MAAM,EAAGb,GAEvCG,EAAW,GAAK,GAClBS,EAAeE,QAAQ,MAErBX,EAAW,GAAK,GAClBS,EAAeE,QAAQ,GAGrBX,EAAW,GAAK,IAAMH,GAAYG,EAAW,GAAK,EAAI,GACxDS,EAAeG,OACbZ,EAAWa,OAAS,EAAIhB,EACxB,EACAG,EAAW,GAAK,GAIhBA,EAAW,GAAKH,EAAWA,GAC7BY,EAAeK,KAAK,MAGlBd,EAAW,GAAKH,EAAW,EAAIA,GACjCY,EAAeK,KAAKjB,GAOtB,OACEf,EAAAA,cAAA,OAAKI,UAAU,cAEX6B,EAAAA,EAAAA,GAAI,IAAIC,IAAIP,IAAiBpB,KAAI,CAAC4B,EAAM1B,KACtC0B,OAAS,OAATA,EACEnC,EAAAA,cAAA,OAAKI,UAAU,UAAS,OAExBJ,EAAAA,cAACC,EAAAA,GAAI,CACHS,IAAG,iBAAmByB,EACtBjC,IAbSkC,EAaOD,EAZb,IAANC,EAAU,IAAM,SAAgBA,GAa7BhC,UAAS,mBAAoBS,IAAgBsB,EAAO,SAAW,KAE9DA,GAhBQC,KAkBZ,IAGD,ECpCV,MArBiBxB,IAKV,IAJLyB,MACEC,QAAQ,MAAEC,IACX,YACDC,GACD5B,EACC,MAAM6B,EAAQF,EACXG,QAAQC,KAAWA,EAAKC,KAAK7C,YAAYY,OACzCJ,KAAKoC,GAAS3C,EAAAA,cAAC6C,EAAQ,CAACnC,IAAKiC,EAAKC,KAAKE,GAAIjD,KAAM8C,EAAKC,SAEzD,OACE5C,EAAAA,cAAC+C,EAAAA,EAAM,KACL/C,EAAAA,cAACgD,EAAAA,EAAM,MACPhD,EAAAA,cAAA,OAAKI,UAAU,aACZqC,EACDzC,EAAAA,cAACiD,EAAcT,IAEV,C","sources":["webpack://kunsun-blog/./src/components/PostLink/index.jsx","webpack://kunsun-blog/./src/components/Paginator/index.jsx","webpack://kunsun-blog/./src/templates/blog-list.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport \"./index.css\"\n\nconst Image = ({ post }) => {\n  return (\n    <div>\n      <StaticImage\n        sizes={post.frontmatter.banner.childImageSharp.fluid}\n        alt=\"Gatsby Docs are awesome\"\n      />\n    </div>\n  )\n}\n\nconst PostLink = ({ post }) => {\n  const postItem = post.frontmatter\n  return (\n    <Link to={postItem.path}>\n      <div className=\"post-link\">\n        <div className=\"link-header\">\n          <h4>{postItem.title}</h4>\n          <div className=\"tags\">\n            {postItem.tags\n              ? postItem.tags.map((tag, i) => {\n                  return (\n                    <div className=\"tag\" key={i}>\n                      #{tag}\n                    </div>\n                  )\n                })\n              : null}\n          </div>\n        </div>\n        <div className=\"post-time\">{postItem.date}</div>\n      </div>\n    </Link>\n  )\n}\n\nexport default PostLink\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport './index.css';\n\nconst range = (start, len, step = 1) =>\n  len\n    ? new Array(len)\n        .fill(undefined)\n        .map((_, i) => +(start + i * step).toFixed(4))\n    : [];\n\nconst Paginator = ({\n  currentPage,\n  limit,\n  numPages,\n  skip,\n}) => {\n  const previousPage = currentPage === 1 ? currentPage : currentPage - 1;\n  const pagesRange = range(previousPage, numPages + 1 - previousPage);\n  const truncatedRange = pagesRange.slice(0, numPages);\n\n  if (pagesRange[0] > 2) {\n    truncatedRange.unshift(null);\n  }\n  if (pagesRange[0] > 1) {\n    truncatedRange.unshift(1);\n  }\n\n  if (pagesRange[0] + 1 === numPages && pagesRange[0] - 1 > 0) {\n    truncatedRange.splice(\n      pagesRange.length - 1 - numPages,\n      0,\n      pagesRange[0] - 1,\n    );\n  }\n\n  if (pagesRange[0] + numPages < numPages) {\n    truncatedRange.push(null);\n  }\n\n  if (pagesRange[0] + numPages - 1 < numPages) {\n    truncatedRange.push(numPages);\n  }\n\n  const getFullPath = (n) => {\n    return n === 1 ? '/' : '/' + \"blog/\" + n;\n  };\n\n  return (\n    <div className=\"paginator\">\n      {\n        [...new Set(truncatedRange)].map((page, i) =>\n          page === null ? (\n            <div className=\"spacer\">...</div>\n          ) : (\n            <Link\n              key={`PaginatorPage_${page}`}\n              to={getFullPath(page)}\n              className={`paginator-link ${currentPage === page ? 'active' : ''}` }\n            >\n              {page}\n            </Link>\n          ),\n        )\n      }\n    </div>\n  )\n}\n\nexport default Paginator;","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PostLink from \"../components/PostLink\"\nimport Header from \"../components/Header\"\nimport Layout from \"../components/Layout\"\nimport Paginator from \"../components/Paginator\"\nimport \"../css/blog_list.css\"\n\nconst BlogList = ({\n  data: {\n    allMdx: { edges },\n  },\n  pageContext,\n}) => {\n  const Posts = edges\n    .filter((edge) => !!edge.node.frontmatter.date)\n    .map((edge) => <PostLink key={edge.node.id} post={edge.node} />)\n\n  return (\n    <Layout>\n      <Header />\n      <div className=\"post-list\">\n        {Posts}\n        <Paginator {...pageContext} />\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogList\n\nexport const pageQuery = graphql`\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        id\n        frontmatter {\n          date\n          title\n          tags\n          banner {\n            childImageSharp {\n              fluid(maxWidth: 70) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n        excerpt(pruneLength: 180)\n      }\n    }\n  }\n`\n"],"names":["_ref2","post","postItem","frontmatter","React","Link","to","path","className","title","tags","map","tag","i","key","date","_ref","currentPage","limit","numPages","skip","previousPage","pagesRange","start","step","len","Array","fill","undefined","_","toFixed","truncatedRange","slice","unshift","splice","length","push","_toConsumableArray","Set","page","n","data","allMdx","edges","pageContext","Posts","filter","edge","node","PostLink","id","Layout","Header","Paginator"],"sourceRoot":""}